[{"C:\\Users\\PC1807\\Desktop\\React Portfolio\\Dog API\\dog-api\\sample\\src\\index.js":"1","C:\\Users\\PC1807\\Desktop\\React Portfolio\\Dog API\\dog-api\\sample\\src\\App.js":"2","C:\\Users\\PC1807\\Desktop\\React Portfolio\\Dog API\\dog-api\\sample\\src\\stores\\DogStore.js":"3","C:\\Users\\PC1807\\Desktop\\React Portfolio\\Dog API\\dog-api\\sample\\src\\components\\DogImage.js":"4","C:\\Users\\PC1807\\Desktop\\React Portfolio\\Dog API\\dog-api\\sample\\src\\components\\DogSelect.js":"5","C:\\Users\\PC1807\\Desktop\\React Portfolio\\Dog API\\dog-api\\sample\\src\\util\\breeds.js":"6","C:\\Users\\PC1807\\Desktop\\Dog API\\dog-api\\src\\index.js":"7","C:\\Users\\PC1807\\Desktop\\Dog API\\dog-api\\src\\App.js":"8","C:\\Users\\PC1807\\Desktop\\Dog API\\dog-api\\src\\components\\DogSelect.js":"9","C:\\Users\\PC1807\\Desktop\\Dog API\\dog-api\\src\\util\\breeds.js":"10","C:\\Users\\PC1807\\Desktop\\Dog API\\dog-api\\src\\stores\\DogStore.js":"11","C:\\Users\\PC1807\\Desktop\\Dog API\\dog-api\\src\\components\\DogImage.js":"12"},{"size":340,"mtime":1610621251608,"results":"13","hashOfConfig":"14"},{"size":279,"mtime":1610627950705,"results":"15","hashOfConfig":"14"},{"size":668,"mtime":1610869260694,"results":"16","hashOfConfig":"14"},{"size":1777,"mtime":1610869473614,"results":"17","hashOfConfig":"14"},{"size":1506,"mtime":1610868596701,"results":"18","hashOfConfig":"14"},{"size":704,"mtime":1610620702927,"results":"19","hashOfConfig":"14"},{"size":342,"mtime":1619094466406,"results":"20","hashOfConfig":"21"},{"size":258,"mtime":1619094211206,"results":"22","hashOfConfig":"21"},{"size":1180,"mtime":1619095626857,"results":"23","hashOfConfig":"21"},{"size":704,"mtime":1619090708854,"results":"24","hashOfConfig":"21"},{"size":354,"mtime":1619096854731,"results":"25","hashOfConfig":"21"},{"size":1137,"mtime":1619097614968,"results":"26","hashOfConfig":"21"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},"3wyj86",{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"29"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"29"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"ars21v",{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\PC1807\\Desktop\\React Portfolio\\Dog API\\dog-api\\sample\\src\\index.js",[],["56","57"],"C:\\Users\\PC1807\\Desktop\\React Portfolio\\Dog API\\dog-api\\sample\\src\\App.js",[],"C:\\Users\\PC1807\\Desktop\\React Portfolio\\Dog API\\dog-api\\sample\\src\\stores\\DogStore.js",[],"C:\\Users\\PC1807\\Desktop\\React Portfolio\\Dog API\\dog-api\\sample\\src\\components\\DogImage.js",["58"],"import React from 'react'\r\nimport { inject, observer } from 'mobx-react'\r\nimport \"../styles/DogImage.css\"\r\n\r\n@inject('dogStore')\r\n@observer\r\nclass DogImage extends React.Component{\r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n      gotImage : false,\r\n      src : \"\"\r\n    }\r\n  }\r\n\r\n\r\n  /*\r\n  handleClick\r\n\r\n  DogStore 에 정의된 getImage를 호출하여 \r\n  성공에 대한 처리와 실패에 대한 처리를 실행하는 메소드\r\n\r\n  성공시 => state 갱신\r\n  (gotImage : true, src : 이미지 주소)\r\n  실패시 => 실패를 출력(console)\r\n  */\r\n  handleClick = () => {\r\n    const { dogStore } = this.props\r\n    dogStore.getImage().then(res => {\r\n      this.setState({\r\n        gotImage: true,\r\n        src: res.data.message\r\n      })\r\n    }).catch(err=>{\r\n      console.error(err)\r\n    })\r\n  }\r\n\r\n  render(){\r\n    // 구조분해\r\n    // gotImage와 src를 this.state라는 것에서 각각 분해한다\r\n    const { gotImage, src } = this.state \r\n    const { dogStore } = this.props\r\n\r\n    return <div className=\"album\">\r\n      {/* API 표시하는 부분 */}\r\n      <div className=\"album__api\">\r\n        <p>\r\n          URL : https://dog.ceo/api/breed/\r\n          <input value={dogStore.dog} \r\n          className=\"album__api__breed\" \r\n          type=\"text\" readOnly />\r\n          /images/random\r\n          {/* readOnly : 쓸 수는 없고 읽을 수만 있는 설정! */}\r\n          <button onClick={this.handleClick}>FETCH</button>\r\n        </p>\r\n      </div>\r\n\r\n      {/* 이미지 표시하는 부분 */}\r\n      <div className=\"album__image\">\r\n        {/* gotImage가 true일 경우에만 image를 표시 하도록! */}\r\n        {gotImage && <img src={src} alt=\"DOG IMAGE\" />}\r\n      </div>\r\n    </div>\r\n  }\r\n}\r\n\r\nexport default DogImage;","C:\\Users\\PC1807\\Desktop\\React Portfolio\\Dog API\\dog-api\\sample\\src\\components\\DogSelect.js",["59"],"import React from 'react'\r\nimport { breeds } from '../util/breeds'\r\n// breeds : 견종이 있는 배열! 을 가져온다\r\nimport { inject, observer } from 'mobx-react'\r\nimport { DogStore } from '../stores/DogStore'\r\nimport \"../styles/DogSelect.css\"\r\n\r\n@inject('dogStore')\r\n@observer\r\nclass DogSelect extends React.Component{\r\n\r\n  constructor(props){\r\n    super(props)\r\n    this.state = { currentText: \"\" }\r\n  }\r\n\r\n  handleChange = event => {\r\n    this.setState({ currentText: event.target.value })\r\n    // console.log(event.target.value)\r\n  }\r\n\r\n  render(){\r\n    const { dogStore } = this.props \r\n    return <div>\r\n      <input className=\"input__breed\" type=\"text\" \r\n      placeholder=\"select breed\" \r\n      onChange={e => this.handleChange(e)} />\r\n\r\n\r\n{/* 미션\r\n.breeds 안에다가 <li> 태그를 견종 수 만큼 만들자!\r\n이때 breeds.map() 사용하기\r\n\r\n조건\r\n1. 각 li 의 클래스는 \"breeds__breed\" \r\n2. 각 li 의 key는 인덱스 번호\r\n3. 각 li 의 콘텐츠는 해당 견종명으로!\r\n*/}\r\n      <ul className=\"breeds\">\r\n        {breeds.map((breed, index) => {\r\n          return breed.includes(this.state.currentText) && <li \r\n          className=\"breeds__breed\" \r\n          onClick={() => dogStore.setDog(breed)}\r\n          key={index}>{breed}</li>\r\n        })}\r\n        {/* \r\n        currentText와 li 가 모두 참이면!! 나타내고 false면 나타내지 않는다\r\n        그래서 &&을 사용!\r\n        */}\r\n      </ul>\r\n    </div>\r\n  }\r\n}\r\n\r\nexport default DogSelect;","C:\\Users\\PC1807\\Desktop\\React Portfolio\\Dog API\\dog-api\\sample\\src\\util\\breeds.js",[],"C:\\Users\\PC1807\\Desktop\\Dog API\\dog-api\\src\\index.js",[],"C:\\Users\\PC1807\\Desktop\\Dog API\\dog-api\\src\\App.js",[],"C:\\Users\\PC1807\\Desktop\\Dog API\\dog-api\\src\\components\\DogSelect.js",["60"],"import React from 'react';\r\nimport { breeds } from '../util/breeds';\r\nimport { inject, observer } from 'mobx-react';\r\nimport { DogStore } from '../stores/DogStore'\r\nimport \"../styles/DogSelect.css\"\r\n\r\n@inject('dogStore')\r\n@observer\r\nclass DogSelect extends React.Component{\r\n  constructor(props){\r\n    super(props)\r\n    this.state = { currentText: \"\" }\r\n  }\r\n\r\n  handleChange = event => {\r\n    this.setState({ currentText: event.target.value })\r\n  }\r\n\r\n  render(){\r\n    const { dogStore } = this.props\r\n\r\n    return <div className=\"select__wrap\">\r\n      <input \r\n      className=\"input__breed\"\r\n      type=\"text\"\r\n      placeholder=\"SEARCH\"\r\n      onChange={e => this.handleChange(e)}\r\n      />\r\n\r\n      <ul>\r\n        {breeds.map((breed, index) => {\r\n          // breed.includes() : 인자 안에있는 문자가 포함되는지 아닌지 여부를 나타내주는 메소드\r\n          return breed.includes(this.state.currentText) &&\r\n          <li \r\n          className=\"breeds__breed\" \r\n          onClick={() => dogStore.setDog(breed)} \r\n          key={index}>\r\n            {breed}\r\n          </li>\r\n        })}\r\n      </ul>\r\n    </div>\r\n  }\r\n\r\n}\r\n\r\nexport default DogSelect;\r\n","C:\\Users\\PC1807\\Desktop\\Dog API\\dog-api\\src\\util\\breeds.js",[],["61","62"],"C:\\Users\\PC1807\\Desktop\\Dog API\\dog-api\\src\\stores\\DogStore.js",[],"C:\\Users\\PC1807\\Desktop\\Dog API\\dog-api\\src\\components\\DogImage.js",["63"],{"ruleId":"64","replacedBy":"65"},{"ruleId":"66","replacedBy":"67"},{"ruleId":"68","severity":1,"message":"69","line":62,"column":22,"nodeType":"70","endLine":62,"endColumn":55},{"ruleId":"71","severity":1,"message":"72","line":5,"column":10,"nodeType":"73","messageId":"74","endLine":5,"endColumn":18},{"ruleId":"71","severity":1,"message":"72","line":4,"column":10,"nodeType":"73","messageId":"74","endLine":4,"endColumn":18},{"ruleId":"64","replacedBy":"75"},{"ruleId":"66","replacedBy":"76"},{"ruleId":"68","severity":1,"message":"69","line":44,"column":22,"nodeType":"70","endLine":44,"endColumn":55},"no-native-reassign",["77"],"no-negated-in-lhs",["78"],"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","no-unused-vars","'DogStore' is defined but never used.","Identifier","unusedVar",["77"],["78"],"no-global-assign","no-unsafe-negation"]